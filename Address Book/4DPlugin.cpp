/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Address Book
 #	author : miyako
 #	2015/09/15
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

#define CALLBACK_IN_NEW_PROCESS 0
#define CALLBACK_SLEEP_TIME 59

@interface Listener : NSObject
{

}
- (id)init;
- (void)dealloc;
- (void)addressbookChanged:(NSNotification *)notification;
@end

namespace AB
{
    Listener *listener = nil;
    
    //constants
    process_name_t MONITOR_PROCESS_NAME = (PA_Unichar *)"$\0A\0D\0D\0R\0E\0S\0S\0_\0B\0O\0O\0K\0\0\0";
    process_stack_size_t MONITOR_PROCESS_STACK_SIZE = 0;
    
    //context management
    std::vector<CUTF16String> INSERT_RECORDS;
    std::vector<CUTF16String> UPDATE_RECORDS;
    std::vector<CUTF16String> DELETE_RECORDS;
    
    //callback management
    C_TEXT LISTENER_METHOD;
    process_number_t METHOD_PROCESS_ID = 0;
    bool PROCESS_SHOULD_TERMINATE = false;
    
    bool PROCESS_SHOULD_RESUME = false;
}

@implementation Listener
- (id)init
{
	if(!(self = [super init])) return self;
	
    [[NSNotificationCenter defaultCenter]
     addObserver:self
     selector:@selector(addressbookChanged:)
     name:kABDatabaseChangedExternallyNotification 
     object:[ABAddressBook sharedAddressBook]];
    
	return self;
}
- (void)dealloc
{
    [[NSNotificationCenter defaultCenter]removeObserver:self];
    [super dealloc];
}
- (void)addressbookChanged:(NSNotification *)notification
{
	NSArray *insertRecords = [[notification userInfo]objectForKey:kABInsertedRecords];
	NSArray *updateRecords = [[notification userInfo]objectForKey:kABUpdatedRecords];
	NSArray *deleteRecords = [[notification userInfo]objectForKey:kABDeletedRecords];
    
	unsigned int i;
	
	NSMutableString *_insertRecords = [[NSMutableString alloc]init];
	NSMutableString *_updateRecords = [[NSMutableString alloc]init];
	NSMutableString *_deleteRecords = [[NSMutableString alloc]init];
	
	if(insertRecords){
		for(i = 0; i < [insertRecords count]; i ++){
			if(!i){
				[_insertRecords setString:[insertRecords objectAtIndex:i]];
			}else{
				[_insertRecords appendFormat:@"\r%@", [insertRecords objectAtIndex:i]];
			}			
		}
	}
	
	if(updateRecords){
		for(i = 0; i < [updateRecords count]; i ++){
			if(!i){
				[_updateRecords setString:[updateRecords objectAtIndex:i]];
			}else{
				[_updateRecords appendFormat:@"\r%@", [updateRecords objectAtIndex:i]];
			}	
		}
	}
	
	if(deleteRecords){
		for(i = 0; i < [deleteRecords count]; i ++){
			if(!i){
				[_deleteRecords setString:[deleteRecords objectAtIndex:i]];
			}else{
				[_deleteRecords appendFormat:@"\r%@", [deleteRecords objectAtIndex:i]];
			}				
		}
	}
    
    CUTF16String ir, ur, dr;
    
    uint32_t len = [_insertRecords length];
    uint32_t size = (len * sizeof(PA_Unichar)) + sizeof(PA_Unichar);
    std::vector<uint8_t> buf(size);
    if([_insertRecords getCString:(char *)&buf[0] maxLength:size encoding:NSUnicodeStringEncoding])
    {
        ir = CUTF16String((const PA_Unichar *)&buf[0], len);
    }

    len = [_updateRecords length];
    size = (len * sizeof(PA_Unichar)) + sizeof(PA_Unichar);
    buf.resize(size);
    if([_updateRecords getCString:(char *)&buf[0] maxLength:size encoding:NSUnicodeStringEncoding])
    {
        ur = CUTF16String((const PA_Unichar *)&buf[0], len);
    }

    len = [_deleteRecords length];
    size = (len * sizeof(PA_Unichar)) + sizeof(PA_Unichar);
    buf.resize(size);
    if([_deleteRecords getCString:(char *)&buf[0] maxLength:size encoding:NSUnicodeStringEncoding])
    {
        dr = CUTF16String((const PA_Unichar *)&buf[0], len);
    }

    [_insertRecords release];
    [_updateRecords release];
    [_deleteRecords release];
    
    if(1)
    {
        AB::INSERT_RECORDS.push_back(ir);
        AB::UPDATE_RECORDS.push_back(ur);
        AB::DELETE_RECORDS.push_back(dr);
    }

    AB::PROCESS_SHOULD_RESUME = true;
}
@end

#pragma mark -

bool IsProcessOnExit()
{
    C_TEXT name;
    PA_long32 state, time;
    PA_GetProcessInfo(PA_GetCurrentProcessNumber(), name, &state, &time);
    CUTF16String procName(name.getUTF16StringPtr());
    CUTF16String exitProcName((PA_Unichar *)"$\0x\0x\0\0\0");
    return (!procName.compare(exitProcName));
}

void OnStartup()
{

}

void OnCloseProcess()
{
    if(IsProcessOnExit())
    {
        listenerLoopFinish();
    }
}

void generateUuid(C_TEXT &returnValue)
{
#if VERSIONMAC
#if __MAC_OS_X_VERSION_MAX_ALLOWED >= 1080
    returnValue.setUTF16String([[[NSUUID UUID]UUIDString]stringByReplacingOccurrencesOfString:@"-" withString:@""]);
#else
    CFUUIDRef uuid = CFUUIDCreate(kCFAllocatorDefault);
    NSString *uuid_str = (NSString *)CFUUIDCreateString(kCFAllocatorDefault, uuid);
    returnValue.setUTF16String([uuid_str stringByReplacingOccurrencesOfString:@"-" withString:@""]);
#endif    
#else

#endif
}

#pragma mark -

void listener_start()
{
    if(!AB::listener)
    {
        AB::listener = [[Listener alloc]init];
    }
}

void listener_end()
{
    /* must do this in main process */
    [AB::listener release];
    AB::listener = nil;
}

void listenerLoop()
{
    if(1)
    {
        AB::PROCESS_SHOULD_TERMINATE = false;
    }
    
    while(!PA_IsProcessDying())
    {
        PA_YieldAbsolute();
        
        bool PROCESS_SHOULD_RESUME;
        bool PROCESS_SHOULD_TERMINATE;
        
        if(1)
        {
            PROCESS_SHOULD_RESUME = AB::PROCESS_SHOULD_RESUME;
            PROCESS_SHOULD_TERMINATE = AB::PROCESS_SHOULD_TERMINATE;
        }
        
        if(PROCESS_SHOULD_RESUME)
        {
            size_t TYPES;
            
            if(1)
            {
                TYPES = AB::INSERT_RECORDS.size();
            }
            
            while(TYPES)
            {
                PA_YieldAbsolute();
                
                if(CALLBACK_IN_NEW_PROCESS)
                {
                    C_TEXT processName;
                    generateUuid(processName);
                    PA_NewProcess((void *)listenerLoopExecuteMethod,
                                  AB::MONITOR_PROCESS_STACK_SIZE,
                                  (PA_Unichar *)processName.getUTF16StringPtr());
                }else
                {
                     listenerLoopExecuteMethod();
                }
                
                if(PROCESS_SHOULD_TERMINATE)
                    break;
                
                if(1)
                {
                    TYPES = AB::INSERT_RECORDS.size();
                    PROCESS_SHOULD_TERMINATE = AB::PROCESS_SHOULD_TERMINATE;
                }
            }
            
            if(1)
            {
                AB::PROCESS_SHOULD_RESUME = false;
            }
            
        }else
        {
            PA_PutProcessToSleep(PA_GetCurrentProcessNumber(), CALLBACK_SLEEP_TIME);
        }
        
        if(1)
        {
            PROCESS_SHOULD_TERMINATE = AB::PROCESS_SHOULD_TERMINATE;
        }
        
        if(PROCESS_SHOULD_TERMINATE)
            break;
    }
    
    if(1)
    {
        AB::INSERT_RECORDS.clear();
        AB::DELETE_RECORDS.clear();
        AB::UPDATE_RECORDS.clear();
        
        AB::LISTENER_METHOD.setUTF16String((PA_Unichar *)"\0\0", 0);
        
        AB::METHOD_PROCESS_ID = 0;
    }
    
    PA_RunInMainProcess((PA_RunInMainProcessProcPtr)listener_end, NULL);
    
    PA_KillProcess();
}

void listenerLoopStart()
{
    if(!AB::METHOD_PROCESS_ID)
    {
        AB::METHOD_PROCESS_ID = PA_NewProcess((void *)listenerLoop,
                                              AB::MONITOR_PROCESS_STACK_SIZE,
                                              AB::MONITOR_PROCESS_NAME);
    }
}

void listenerLoopFinish()
{
    if(AB::METHOD_PROCESS_ID)
    {
        AB::PROCESS_SHOULD_TERMINATE = true;
        
        PA_YieldAbsolute();
        
        AB::PROCESS_SHOULD_RESUME = true;
    }
} 

void listenerLoopExecute()
{
    AB::PROCESS_SHOULD_TERMINATE = false;
    AB::PROCESS_SHOULD_RESUME = true;
}

void listenerLoopExecuteMethod()
{
    std::vector<CUTF16String>::iterator ir = AB::INSERT_RECORDS.begin();
    std::vector<CUTF16String>::iterator ur = AB::UPDATE_RECORDS.begin();
    std::vector<CUTF16String>::iterator dr = AB::DELETE_RECORDS.begin();
    
    CUTF16String __INSERT_RECORDS = *ir;
    CUTF16String __UPDATE_RECORDS = *ur;
    CUTF16String __DELETE_RECORDS = *dr;
    
    method_id_t methodId = PA_GetMethodID((PA_Unichar *)AB::LISTENER_METHOD.getUTF16StringPtr());
    
    if(methodId)
    {
        PA_Variable    params[3];
        params[0] = PA_CreateVariable(eVK_Unistring);
        params[1] = PA_CreateVariable(eVK_Unistring);
        params[2] = PA_CreateVariable(eVK_Unistring);
        
        PA_Unistring INSERT_RECORDS = PA_CreateUnistring((PA_Unichar *)__INSERT_RECORDS.c_str());
        PA_SetStringVariable(&params[0], &INSERT_RECORDS);
        
        PA_Unistring UPDATE_RECORDS = PA_CreateUnistring((PA_Unichar *)__UPDATE_RECORDS.c_str());
        PA_SetStringVariable(&params[1], &UPDATE_RECORDS);
        
        PA_Unistring DELETE_RECORDS = PA_CreateUnistring((PA_Unichar *)__DELETE_RECORDS.c_str());
        PA_SetStringVariable(&params[2], &DELETE_RECORDS);
        
        PA_SetStringVariable(&params[0], &INSERT_RECORDS);
        PA_SetStringVariable(&params[1], &UPDATE_RECORDS);
        PA_SetStringVariable(&params[2], &DELETE_RECORDS);
        
        AB::INSERT_RECORDS.erase(ir);
        AB::UPDATE_RECORDS.erase(ur);
        AB::DELETE_RECORDS.erase(dr);
        
        PA_ExecuteMethodByID(methodId, params, 3);
        
        PA_ClearVariable(&params[0]);
        PA_ClearVariable(&params[1]);
        PA_ClearVariable(&params[2]);

    }else
    {
        PA_Variable    params[4];
        params[1] = PA_CreateVariable(eVK_Unistring);
        params[2] = PA_CreateVariable(eVK_Unistring);
        params[3] = PA_CreateVariable(eVK_Unistring);
        
        params[0] = PA_CreateVariable(eVK_Unistring);
        PA_Unistring method = PA_CreateUnistring((PA_Unichar *)AB::LISTENER_METHOD.getUTF16StringPtr());
        PA_SetStringVariable(&params[0], &method);
        
        PA_Unistring INSERT_RECORDS = PA_CreateUnistring((PA_Unichar *)__INSERT_RECORDS.c_str());
        PA_SetStringVariable(&params[1], &INSERT_RECORDS);
        
        PA_Unistring UPDATE_RECORDS = PA_CreateUnistring((PA_Unichar *)__UPDATE_RECORDS.c_str());
        PA_SetStringVariable(&params[2], &UPDATE_RECORDS);
        
        PA_Unistring DELETE_RECORDS = PA_CreateUnistring((PA_Unichar *)__DELETE_RECORDS.c_str());
        PA_SetStringVariable(&params[3], &DELETE_RECORDS);
        
        PA_SetStringVariable(&params[1], &INSERT_RECORDS);
        PA_SetStringVariable(&params[2], &UPDATE_RECORDS);
        PA_SetStringVariable(&params[3], &DELETE_RECORDS);
        
        AB::INSERT_RECORDS.erase(ir);
        AB::UPDATE_RECORDS.erase(ur);
        AB::DELETE_RECORDS.erase(dr);
        
        /* execute method */
        PA_ExecuteCommandByID(1007, params, 4);
        
        PA_ClearVariable(&params[0]);
        PA_ClearVariable(&params[1]);
        PA_ClearVariable(&params[2]);
        PA_ClearVariable(&params[3]);
    }
}

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
        case kInitPlugin :
        case kServerInitPlugin :
            OnStartup();
            break;
            
        case kCloseProcess :
            OnCloseProcess();
            break;
// --- Application

		case 1 :
			AB_TERMINATE(pResult, pParams);
			break;

		case 2 :
			AB_LAUNCH(pResult, pParams);
			break;

// --- People

		case 3 :
			AB_Create_person(pResult, pParams);
			break;

		case 4 :
			AB_Set_person_property(pResult, pParams);
			break;

		case 5 :
			AB_Get_person_property(pResult, pParams);
			break;

		case 6 :
			AB_Remove_person(pResult, pParams);
			break;

		case 7 :
			AB_Set_person_properties(pResult, pParams);
			break;

		case 8 :
			AB_Get_person_properties(pResult, pParams);
			break;

		case 9 :
			AB_Set_person_image(pResult, pParams);
			break;

		case 10 :
			AB_Get_person_image(pResult, pParams);
			break;

		case 11 :
			AB_Person_get_vcard(pResult, pParams);
			break;

		case 12 :
			AB_QUERY_PEOPLE(pResult, pParams);
			break;

		case 13 :
			AB_Create_person_with_vcard(pResult, pParams);
			break;

		case 14 :
			AB_Set_person_flags(pResult, pParams);
			break;

		case 15 :
			AB_Get_person_flags(pResult, pParams);
			break;

		case 16 :
			AB_Get_me(pResult, pParams);
			break;

		case 17 :
			AB_Set_me(pResult, pParams);
			break;

// --- Group

		case 18 :
			AB_Create_group(pResult, pParams);
			break;

		case 19 :
			AB_Set_group_name(pResult, pParams);
			break;

		case 20 :
			AB_Get_group_name(pResult, pParams);
			break;

		case 21 :
			AB_Remove_group(pResult, pParams);
			break;

		case 22 :
			AB_Remove_person_from_group(pResult, pParams);
			break;

		case 23 :
			AB_Add_group_to_group(pResult, pParams);
			break;

		case 24 :
			AB_Add_person_to_group(pResult, pParams);
			break;

		case 25 :
			AB_Remove_group_from_group(pResult, pParams);
			break;

		case 26 :
			AB_Get_people_in_group(pResult, pParams);
			break;

		case 27 :
			AB_Get_groups_in_group(pResult, pParams);
			break;

// --- Type Cast

		case 28 :
			AB_Make_date(pResult, pParams);
			break;

		case 29 :
			AB_GET_DATE(pResult, pParams);
			break;

		case 30 :
			AB_Make_address(pResult, pParams);
			break;

		case 31 :
			AB_GET_ADDRESS(pResult, pParams);
			break;

// --- Address Book

		case 32 :
			AB_GET_LIST(pResult, pParams);
			break;

// --- Utilities

		case 33 :
			AB_Get_localized_string(pResult, pParams);
			break;

		case 34 :
			AB_Get_default_country_code(pResult, pParams);
			break;

		case 35 :
			AB_Get_default_name_ordering(pResult, pParams);
			break;

// --- Notification

		case 36 :
			AB_Set_notification_method(pResult, pParams);
			break;

		case 37 :
			AB_Get_notification_method(pResult, pParams);
			break;

// --- Group II

		case 38 :
			AB_Get_parent_groups(pResult, pParams);
			break;

// --- Special

		case 39 :
			AB_LIST_GROUP_PEOPLE(pResult, pParams);
			break;

		case 40 :
			AB_FIND_PEOPLE(pResult, pParams);
			break;

		case 41 :
			AB_GET_GROUP_GROUPS(pResult, pParams);
			break;

		case 42 :
			AB_GET_PERSON_GROUPS(pResult, pParams);
			break;

		case 43 :
			AB_REMOVE_FROM_PRIVACY_LIST(pResult, pParams);
			break;

		case 44 :
			AB_Is_access_denied(pResult, pParams);
			break;

	}
}

#pragma mark -

ABPerson *_GetPersonForUniqueId(NSString *uniqueId)
{
	ABPerson *person = NULL;
	
	if(uniqueId)
	{
        @autoreleasepool
        {
            //this method raised exception if the uuid is malformed
            
            NSPredicate *predicate = [NSPredicate predicateWithFormat:@"SELF MATCHES %@",
                                      @"[:Hex_Digit:]{8}-[:Hex_Digit:]{4}-[:Hex_Digit:]{4}-[:Hex_Digit:]{4}-[:Hex_Digit:]{12}:ABPerson"];
            
            if([predicate evaluateWithObject:uniqueId])
            {
                ABRecord *record = [[ABAddressBook sharedAddressBook]recordForUniqueId:uniqueId];
                if(!record)
                {
                    NSLog(@"The person ID is invalid: %@", uniqueId);
                }else{
                    person = (ABPerson *)record;
                }
            }else{
                NSLog(@"The person ID is malformed: %@", uniqueId);
            }
        }
	}
    
	return person;
}

ABGroup *_GetGroupForUniqueId(NSString *uniqueId)
{
	ABGroup *group = NULL;
	
	if(uniqueId)
	{
        @autoreleasepool
        {
            //this method raised exception if the uuid is malformed
            
            NSPredicate *predicate = [NSPredicate predicateWithFormat:@"SELF MATCHES %@",
                                      @"[:Hex_Digit:]{8}-[:Hex_Digit:]{4}-[:Hex_Digit:]{4}-[:Hex_Digit:]{4}-[:Hex_Digit:]{12}:ABGroup"];
            
            if([predicate evaluateWithObject:uniqueId])
            {
                ABRecord *record = [[ABAddressBook sharedAddressBook]recordForUniqueId:uniqueId];
                if(!record)
                {
                    NSLog(@"The group ID is invalid: %@", uniqueId);
                }else{
                    group = (ABGroup *)record;
                }
            }else{
                NSLog(@"The group ID is malformed: %@", uniqueId);
            }
        }
	}
	return group;
}

ABSearchComparison _SearchComparisonForName(NSString *name)
{
	ABSearchComparison comparison = kABEqual;
	
    @autoreleasepool
    {
        NSArray *searchComparisons = @[@"Equal", @"NotEqual", @"DoesNotContainSubString", @"PrefixMatch", @"ContainsSubString", @"SuffixMatch"];
        
        NSUInteger pid = [searchComparisons indexOfObject:name];
        
        switch (pid)
        {
            case 0://Equal
                comparison = kABEqualCaseInsensitive;
                break;
            case 1://NotEqual
                comparison = kABNotEqualCaseInsensitive;
                break;
            case 2://DoesNotContainSubString
                comparison = kABDoesNotContainSubStringCaseInsensitive;
                break;
            case 3://PrefixMatch
                comparison = kABPrefixMatchCaseInsensitive;
                break;
            case 4://ContainsSubString
                comparison = kABContainsSubStringCaseInsensitive;
                break;
            case 5://SuffixMatch
                comparison = kABSuffixMatchCaseInsensitive;
                break;
        }
    }
    
	return comparison;
}

NSString *_AddressKeyForName(NSString *name)
{
	NSString *key = nil;//this value can be nil
	
    @autoreleasepool
    {
        NSArray *addressKeys = @[@"Street", @"City", @"State", @"ZIP", @"Country", @"CountryCode"];
        
        NSUInteger pid = [addressKeys indexOfObject:name];
        
        switch (pid)
        {
            case 0://Street
                key = kABAddressStreetKey;
                break;
            case 1://City
                key = kABAddressCityKey;
                break;
            case 2://State
                key = kABAddressStateKey;
                break;
            case 3://ZIP
                key = kABAddressZIPKey;
                break;
            case 4://Country
                key = kABAddressCountryKey;
                break;
            case 5://CountryCode
                key = kABAddressCountryCodeKey;
                break;
        }
    }
    
	return key;
}

NSString *_LabelForName(NSString *name)
{
	NSString *label = nil;//this value can be nil
	
	if(![name isEqualToString:@""]) label = name;
	
	return label;			
}

NSString *_PropertyForName(NSString *name)
{
	NSString *property = @"";//this value cannot be null
	
    @autoreleasepool
    {
        NSArray *PropertyNames = @[@"FirstName", @"LastName", @"FirstNamePhonetic", @"LastNamePhonetic", @"Nickname", @"MaidenName",
                                   @"Birthday", @"Organization", @"JobTitle", @"Note", @"Department", @"MiddleName",
                                   @"MiddleNamePhonetic", @"Title", @"Suffix", @"URLs", @"CalendarURI", @"Email",
                                   @"Address", @"OtherDates", @"RelatedNames", @"Phone", @"AIMInstant", @"JabberInstant",
                                   @"MSNInstant", @"YahooInstant", @"ICQInstant", @"ModificationDate", @"CreationDate", @"UID"];
        
        NSUInteger pid = [PropertyNames indexOfObject:name];
        
        switch (pid)
        {
            case 0://FirstName
                property = kABFirstNameProperty;
                break;
            case 1://LastName
                property = kABLastNameProperty;
                break;
            case 2://FirstNamePhonetic
                property = kABFirstNamePhoneticProperty;
                break;
            case 3://LastNamePhonetic
                property = kABLastNamePhoneticProperty;
                break;
            case 4://Nickname
                property = kABNicknameProperty;
                break;
            case 5://MaidenName
                property = kABMaidenNameProperty;
                break;
                
            case 6://Birthday
                property = kABBirthdayProperty;
                break;
            case 7://Organization
                property = kABOrganizationProperty;
                break;
            case 8://JobTitle
                property = kABJobTitleProperty;
                break;
            case 9://Note
                property = kABNoteProperty;
                break;
            case 10://Department
                property = kABDepartmentProperty;
                break;
            case 11://MiddleName
                property = kABMiddleNameProperty;
                break;
                
            case 12://MiddleNamePhonetic
                property = kABMiddleNamePhoneticProperty;
                break;
            case 13://Title
                property = kABTitleProperty;
                break;
            case 14://Suffix
                property = kABSuffixProperty;
                break;
            case 15://URLs
                property = kABURLsProperty;
                break;
            case 16://CalendarURI
                property = kABCalendarURIsProperty;
                break;
            case 17://Email
                property = kABEmailProperty;
                break;
                
            case 18://Address
                property = kABAddressProperty;
                break;
            case 19://OtherDates
                property = kABOtherDatesProperty;
                break;
            case 20://RelatedNames
                property = kABRelatedNamesProperty;
                break;
            case 21://Phone
                property = kABPhoneProperty;
                break;
                /*        case 22://AIMInstant
                 property = kABAIMInstantProperty;
                 break;
                 case 23://JabberInstant
                 property = kABJabberInstantProperty;
                 break;
                 
                 case 24://MSNInstant
                 property = kABMSNInstantProperty;
                 break;
                 case 25://YahooInstant
                 property = kABYahooInstantProperty;
                 break;
                 case 26://ICQInstant
                 property = kABICQInstantProperty;
                 break;
                 */
            case 27://ModificationDate
                property = kABModificationDateProperty;
                break;
            case 28://CreationDate
                property = kABCreationDateProperty;
                break;
            case 29://UID
                property = kABUIDProperty;
                break;
        }
    }
    
	return property;			
}

id _ValueForProperty(NSString *string, NSString *property)
{
	id value = string;
    
    @autoreleasepool
    {
        NSArray *PropertyNames = @[@"FirstName", @"LastName", @"FirstNamePhonetic", @"LastNamePhonetic", @"Nickname", @"MaidenName",
                                   @"Birthday", @"Organization", @"JobTitle", @"Note", @"Department", @"MiddleName",
                                   @"MiddleNamePhonetic", @"Title", @"Suffix", @"URLs", @"CalendarURI", @"Email",
                                   @"Address", @"OtherDates", @"RelatedNames", @"Phone", @"AIMInstant", @"JabberInstant",
                                   @"MSNInstant", @"YahooInstant", @"ICQInstant", @"ModificationDate", @"CreationDate", @"UID"];
        
        NSUInteger pid = [PropertyNames indexOfObject:property];
        
        switch (pid)
        {
            case 6://Birthday
                value = [NSDate dateWithString:string];//this value can be nil
                break;
            case 27://ModificationDate
                value = [NSDate dateWithString:string];//this value can be nil
                break;
            case 28://CreationDate
                value = [NSDate dateWithString:string];//this value can be nil
                break;
        }
    }
	
	return value;			
}

void _StringToDateTimeOffset(NSString *dateString, PA_Date *date, int *time, int *offset)
{		
	if(dateString)
	{
		NSDate *nsd = [NSDate dateWithString:dateString];
		NSString *description = [nsd description];
		
		if([description length] == 25)
		{
			date->fYear = [[description substringWithRange:NSMakeRange(0,4)]integerValue];
			date->fMonth = [[description substringWithRange:NSMakeRange(5,2)]integerValue];
			date->fDay = [[description substringWithRange:NSMakeRange(8,2)]integerValue];		
			int hour = [[description substringWithRange:NSMakeRange(11,2)]integerValue]; 		
			int minute = [[description substringWithRange:NSMakeRange(14,2)]integerValue]; 
			int second = [[description substringWithRange:NSMakeRange(17,2)]integerValue]; 		
			*time = second + (minute * 60) + (hour * 3600);	
			NSTimeZone *zone = [NSTimeZone timeZoneWithName:[@"GMT" stringByAppendingString:[dateString substringWithRange:NSMakeRange(20,5)]]];
			if(zone) *offset = [zone secondsFromGMTForDate:nsd];
		}
	}	
}

NSString *_DateTimeZoneToString(PA_Date *date, int time, NSString *name)
{
	NSString *description = NULL;
	
	if(name)
	{
		NSTimeZone *zone = [NSTimeZone timeZoneWithName:name];
		if(!zone) zone = [NSTimeZone localTimeZone];
		
		CFGregorianDate gregDate;
		gregDate.year = date->fYear;
		gregDate.month = date->fMonth;
		gregDate.day = date->fDay;
		gregDate.hour = 0;
		gregDate.minute = 0;
		gregDate.second = 0;
		
		CFGregorianUnits offset;
		offset.years = 0;
		offset.months = 0;
		offset.days = 0;	
		offset.minutes = 0;
		offset.hours = 0;
		offset.seconds = time;
		
		if( CFGregorianDateIsValid( gregDate, kCFGregorianUnitsYears+kCFGregorianUnitsMonths+kCFGregorianUnitsDays))
		{
			CFAbsoluteTime at = CFGregorianDateGetAbsoluteTime(gregDate, (CFTimeZoneRef)zone);
			CFAbsoluteTime seconds = CFAbsoluteTimeAddGregorianUnits(at, (CFTimeZoneRef)zone, offset);		
			NSDate *nsd = (NSDate *)CFDateCreate(kCFAllocatorDefault, seconds);
			description = [[NSString alloc]initWithString:[nsd description]];		
			[nsd release];
		}
		
	}
	
	if(description) 
	{
		return description;
	}else{
		return @"";	
	}
    
}

#pragma mark -

// ---------------------------------- Application ---------------------------------


void AB_TERMINATE(sLONG_PTR *pResult, PackagePtr pParams)
{
	NSArray *runningApplications = [NSRunningApplication runningApplicationsWithBundleIdentifier:@"com.apple.AddressBook"];
    if([runningApplications count])
    {
        [(NSRunningApplication *)[runningApplications objectAtIndex:0]terminate];
    }
}

void AB_LAUNCH(sLONG_PTR *pResult, PackagePtr pParams)
{
	[[NSWorkspace sharedWorkspace]launchApplication:@"Address Book"];
}

// ------------------------------------ People ------------------------------------

void AB_Create_person(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT returnValue;
    
	NSError *error = nil;
	
	ABPerson * person = [[ABPerson alloc]init];
	
	[[ABAddressBook sharedAddressBook]addRecord:person];
	
	if(![[ABAddressBook sharedAddressBook]saveAndReturnError:&error])
	{
		NSLog(@"can't create person: %@", [error localizedDescription]);
	}else{
		returnValue.setUTF16String([person uniqueId]);
	}
	
	returnValue.setReturn(pResult);
	
	[person release];
}

void AB_Set_person_property(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_TEXT Param3;
	C_LONGINT returnValue;
    
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
    
	int success = 0;
	NSError *error = nil;
	
	NSString *uniqueId = Param1.copyUTF16String();
	NSString *property = Param2.copyUTF16String();
	NSString *value = Param3.copyUTF16String();	
    
	ABPerson *person = _GetPersonForUniqueId(uniqueId);
	
	if(person)
	{
		NSArray *personProperties = [NSArray arrayWithObjects:
									 @"FirstName", @"LastName", @"FirstNamePhonetic", @"LastNamePhonetic", @"Nickname" ,
									 @"MaidenName", @"Birthday", @"Organization", @"JobTitle", @"Note", @"Department", 
									 @"MiddleName", @"MiddleNamePhonetic", @"Title", @"Suffix", nil];
		
		NSUInteger pid = [personProperties indexOfObject:property];
		
		switch (pid)
		{
			case 2://FirstNamePhonetic
			case 3://LastNamePhonetic
			case 12://MiddleNamePhonetic	
				if(![value length])
					value = nil;
				break;
		}
		
		switch (pid)
		{
			case 0://FirstName
				if([person setValue:value forProperty:kABFirstNameProperty])
					success = [[ABAddressBook sharedAddressBook]saveAndReturnError:&error];
				break;
			case 1://LastName
				if([person setValue:value forProperty:kABLastNameProperty])
					success = [[ABAddressBook sharedAddressBook]saveAndReturnError:&error];
				break;
			case 2://FirstNamePhonetic
				if([person setValue:value forProperty:kABFirstNamePhoneticProperty])
					success = [[ABAddressBook sharedAddressBook]saveAndReturnError:&error];
				break;
			case 3://LastNamePhonetic
				if([person setValue:value forProperty:kABLastNamePhoneticProperty])
					success = [[ABAddressBook sharedAddressBook]saveAndReturnError:&error];
				break;
			case 4://Nickname
				if([person setValue:value forProperty:kABNicknameProperty])
					success = [[ABAddressBook sharedAddressBook]saveAndReturnError:&error];
				break;							
			case 5://MaidenName
				if([person setValue:value forProperty:kABMaidenNameProperty])
					success = [[ABAddressBook sharedAddressBook]saveAndReturnError:&error];
				break;
			case 6://Birthday
				if([NSDate dateWithString:value])
				{
					if([person setValue:[NSDate dateWithString:value] forProperty:kABBirthdayProperty])
						success = [[ABAddressBook sharedAddressBook]saveAndReturnError:&error];	
				}
				break;
			case 7://Organization
				if([person setValue:value forProperty:kABOrganizationProperty])
					success = [[ABAddressBook sharedAddressBook]saveAndReturnError:&error];
				break;
			case 8://JobTitle
				if([person setValue:value forProperty:kABJobTitleProperty])
					success = [[ABAddressBook sharedAddressBook]saveAndReturnError:&error];
				break;
			case 9://Note
				if([person setValue:value forProperty:kABNoteProperty])
					success = [[ABAddressBook sharedAddressBook]saveAndReturnError:&error];
				break;
			case 10://Department
				if([person setValue:value forProperty:kABDepartmentProperty])
					success = [[ABAddressBook sharedAddressBook]saveAndReturnError:&error];
				break;
			case 11://MiddleName
				if([person setValue:value forProperty:kABMiddleNameProperty])
					success = [[ABAddressBook sharedAddressBook]saveAndReturnError:&error];
				break;
			case 12://MiddleNamePhonetic
				if([person setValue:value forProperty:kABMiddleNamePhoneticProperty])
					success = [[ABAddressBook sharedAddressBook]saveAndReturnError:&error];
				break;
			case 13://Title
				if([person setValue:value forProperty:kABTitleProperty])
					success = [[ABAddressBook sharedAddressBook]saveAndReturnError:&error];
				break;
			case 14://Suffix
				if([person setValue:value forProperty:kABSuffixProperty])
					success = [[ABAddressBook sharedAddressBook]saveAndReturnError:&error];
				break;																
			default:
				break;
		}		
	}
	
	if(error)
	{
		success = [error code];
		NSLog(@"can't update person: %@", [error localizedDescription]);
	}	
	
	[uniqueId release];
	[property release];	
	[value release];		
	
	returnValue.setIntValue(success);
	returnValue.setReturn(pResult);
}

void AB_Get_person_property(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_TEXT Param3;
	C_LONGINT returnValue;
    
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
    
	int success = 0;
	
	NSString *uniqueId = Param1.copyUTF16String();	
	NSString *property = Param2.copyUTF16String();
	
	ABPerson *person = _GetPersonForUniqueId(uniqueId);
	
	if(person)
	{
		NSArray *personProperties = [NSArray arrayWithObjects:
									 @"FirstName", @"LastName", @"FirstNamePhonetic", @"LastNamePhonetic", @"Nickname" ,
									 @"MaidenName", @"Birthday", @"Organization", @"JobTitle", @"Note", @"Department", 
									 @"MiddleName", @"MiddleNamePhonetic", @"Title", @"Suffix", @"CreationDate", @"ModificationDate", nil];
		
		NSUInteger pid = [personProperties indexOfObject:property];
		
		switch (pid)
		{
			case 0://FirstName
				Param3.setUTF16String([person valueForProperty:kABFirstNameProperty]);
				success = 1;
				break;
			case 1://LastName
				Param3.setUTF16String([person valueForProperty:kABLastNameProperty]);
				success = 1;
				break;
			case 2://FirstNamePhonetic
				Param3.setUTF16String([person valueForProperty:kABFirstNamePhoneticProperty]);
				success = 1;
				break;
			case 3://LastNamePhonetic
				Param3.setUTF16String([person valueForProperty:kABLastNamePhoneticProperty]);
				success = 1;
				break;
			case 4://Nickname
				Param3.setUTF16String([person valueForProperty:kABNicknameProperty]);
				success = 1;
				break;
				
			case 5://MaidenName
				Param3.setUTF16String([person valueForProperty:kABMaidenNameProperty]);
				success = 1;
				break;
			case 6://Birthday
				Param3.setUTF16String([[person valueForProperty:kABBirthdayProperty]description]);
				success = 1;
				break;
			case 7://Organization
				Param3.setUTF16String([person valueForProperty:kABOrganizationProperty]);
				success = 1;
				break;
			case 8://JobTitle
				Param3.setUTF16String([person valueForProperty:kABJobTitleProperty]);
				success = 1;
				break;
			case 9://Note
				Param3.setUTF16String([person valueForProperty:kABNoteProperty]);
				success = 1;
				break;
				
			case 10://Department
				Param3.setUTF16String([person valueForProperty:kABDepartmentProperty]);
				success = 1;
				break;
			case 11://MiddleName
				Param3.setUTF16String([person valueForProperty:kABMiddleNameProperty]);
				success = 1;
				break;
			case 12://MiddleNamePhonetic
				Param3.setUTF16String([person valueForProperty:kABMiddleNamePhoneticProperty]);
				success = 1;
				break;
			case 13://Title
				Param3.setUTF16String([person valueForProperty:kABTitleProperty]);
				success = 1;
				break;
			case 14://Suffix
				Param3.setUTF16String([person valueForProperty:kABSuffixProperty]);
				success = 1;
				break;	
			case 15://CreationDate
				Param3.setUTF16String([[person valueForProperty:kABCreationDateProperty]description]);
				success = 1;
				break;
			case 16://ModificationDate
				Param3.setUTF16String([[person valueForProperty:kABModificationDateProperty]description]);
				success = 1;
				break;					
			default:
				break;
		}			
	}
	
	[uniqueId release];
	[property release];	
	
	Param3.toParamAtIndex(pParams, 3);
	
	returnValue.setIntValue(success);	
	returnValue.setReturn(pResult);
}

void AB_Remove_person(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT returnValue;
    
	Param1.fromParamAtIndex(pParams, 1);
    
	int success = 0;
	NSError *error = nil;
	
	NSString *uniqueId = Param1.copyUTF16String();
	
	ABPerson *person = _GetPersonForUniqueId(uniqueId);
	
	if(person)
	{
		if([[ABAddressBook sharedAddressBook]removeRecord:person])
			success = [[ABAddressBook sharedAddressBook]saveAndReturnError:&error];
	}
	
	if(error)
	{
		success = [error code];
		NSLog(@"can't remove person: %@", [error localizedDescription]);
	}
	
	[uniqueId release];
	
	returnValue.setIntValue(success);	
	returnValue.setReturn(pResult);
}

void AB_Set_person_properties(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	ARRAY_TEXT Param3;
	ARRAY_TEXT Param4;	
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);		
	Param4.fromParamAtIndex(pParams, 3);
	Param3.fromParamAtIndex(pParams, 4);
    
	int success = 0;
	NSError *error = nil;
	
	NSString *uniqueId = Param1.copyUTF16String();
	NSString *property = Param2.copyUTF16String();
	
	ABMutableMultiValue *properties = [[ABMutableMultiValue alloc]init];
	
	ABPerson *person = _GetPersonForUniqueId(uniqueId);
	
	if(person)
	{
		NSArray *personProperties = [NSArray arrayWithObjects:
									 @"URLs", @"CalendarURI", @"Email", @"Address", @"OtherDates" ,
									 @"RelatedNames", @"Phone", @"AIMInstant", @"JabberInstant", @"MSNInstant", @"YahooInstant", 
									 @"ICQInstant", nil];
		
		NSUInteger pid = [personProperties indexOfObject:property];
		CFPropertyListRef dictionaryPropertyList;
		NSString *identifier;
		unsigned int i;
		
		switch (pid)
		{
			case 0://URLs
				
				for(i = 1; i < Param3.getSize(); i++)
				{
					C_TEXT v, l;
					CUTF16String vv, ll;
					
					Param3.copyUTF16StringAtIndex(&vv, i);	
					Param4.copyUTF16StringAtIndex(&ll, i);	
					
					v.setUTF16String(&vv);
					l.setUTF16String(&ll);
					
					NSString *value = v.copyUTF16String();
					NSString *label = l.copyUTF16String();
					
					if([label length])
					{					
						identifier = [properties addValue:value withLabel:label];
						if((i == 1) && (identifier))
						{
							if(![properties setPrimaryIdentifier:identifier])
								NSLog(@"can't update primary identifier: %@ for %@", identifier, label);
						}
					}else{
						NSLog(@"attempt to set person property %@ with no label.", value);	
					}						
					[value release];
					[label release];					
				}
				
				if([person setValue:properties forProperty:kABURLsProperty])
					success = [[ABAddressBook sharedAddressBook]saveAndReturnError:&error];
				
				break;
			case 1://CalendarURI				
				
				for(i = 1; i < Param3.getSize(); i++)
				{
					C_TEXT v, l;
					CUTF16String vv, ll;
					
					Param3.copyUTF16StringAtIndex(&vv, i);	
					Param4.copyUTF16StringAtIndex(&ll, i);	
					
					v.setUTF16String(&vv);
					l.setUTF16String(&ll);
					
					NSString *value = v.copyUTF16String();
					NSString *label = l.copyUTF16String();
					
					if([label length])
					{					
						identifier = [properties addValue:value withLabel:label];
						if((i == 1) && (identifier))
						{
							if(![properties setPrimaryIdentifier:identifier])
								NSLog(@"can't update primary identifier: %@ for %@", identifier, label);
						}
					}else{
						NSLog(@"attempt to set person property %@ with no label.", value);	
					}						
					[value release];
					[label release];					
				}
				
				if([person setValue:properties forProperty:kABCalendarURIsProperty])
					success = [[ABAddressBook sharedAddressBook]saveAndReturnError:&error];				
				
				break;
			case 2://Email
				
				for(i = 1; i < Param3.getSize(); i++)
				{
					C_TEXT v, l;
					CUTF16String vv, ll;
					
					Param3.copyUTF16StringAtIndex(&vv, i);	
					Param4.copyUTF16StringAtIndex(&ll, i);	
					
					v.setUTF16String(&vv);
					l.setUTF16String(&ll);
					
					NSString *value = v.copyUTF16String();
					NSString *label = l.copyUTF16String();
					
					if([label length])
					{	
						identifier = [properties addValue:value withLabel:label];
						if((i == 1) && (identifier))
						{
							if(![properties setPrimaryIdentifier:identifier])
								NSLog(@"can't update primary identifier: %@ for %@", identifier, label);
						}
					}else{
						NSLog(@"attempt to set person property %@ with no label.", value);	
					}
					[value release];
					[label release];					
				}
				
				if([person setValue:properties forProperty:kABEmailProperty])
					success = [[ABAddressBook sharedAddressBook]saveAndReturnError:&error];
				
				break;
			case 3://Address
				
				for(i = 1; i < Param3.getSize(); i++)
				{
					C_TEXT v, l;
					CUTF16String vv, ll;
					
					Param3.copyUTF16StringAtIndex(&vv, i);	
					Param4.copyUTF16StringAtIndex(&ll, i);	
					
					v.setUTF16String(&vv);
					l.setUTF16String(&ll);
					
					NSString *value = v.copyUTF16String();
					NSString *label = l.copyUTF16String();
                    
					if([label length])
					{					
						dictionaryPropertyList = CFPropertyListCreateFromXMLData(kCFAllocatorDefault, (CFDataRef)[value dataUsingEncoding:NSUTF8StringEncoding], kCFPropertyListImmutable, NULL);	
						if(dictionaryPropertyList)
						{
							if(CFGetTypeID(dictionaryPropertyList) == CFDictionaryGetTypeID())
							{						
								identifier = [properties addValue:(NSDictionary *)dictionaryPropertyList withLabel:label];
								if((i == 1) && (identifier))
								{
									if(![properties setPrimaryIdentifier:identifier])
										NSLog(@"can't update primary identifier: %@ for %@", identifier, label);
								}
							}
							CFRelease(dictionaryPropertyList);		
						}
					}else{
						NSLog(@"attempt to set person property %@ with no label.", value);	
					}						
					[value release];
					[label release];					
				}
				
				if([person setValue:properties forProperty:kABAddressProperty])
					success = [[ABAddressBook sharedAddressBook]saveAndReturnError:&error];				
				
				break;
			case 4://OtherDates
				
				for(i = 1; i < Param3.getSize(); i++)
				{
					C_TEXT v, l;
					CUTF16String vv, ll;
					
					Param3.copyUTF16StringAtIndex(&vv, i);	
					Param4.copyUTF16StringAtIndex(&ll, i);	
					
					v.setUTF16String(&vv);
					l.setUTF16String(&ll);
					
					NSString *value = v.copyUTF16String();
					NSString *label = l.copyUTF16String();
					
					if([label length])
					{					
						if([NSDate dateWithString:value])
						{
							identifier = [properties addValue:[NSDate dateWithString:value] withLabel:label];
							if((i == 1) && (identifier))
							{
								if(![properties setPrimaryIdentifier:identifier])
									NSLog(@"can't update primary identifier: %@ for %@", identifier, label);
							}
						}
					}else{
						NSLog(@"attempt to set person property %@ with no label.", value);	
					}						
					[value release];
					[label release];					
				}
				
				if([person setValue:properties forProperty:kABOtherDatesProperty])
					success = [[ABAddressBook sharedAddressBook]saveAndReturnError:&error];						
				
				break;																
				
			case 5://RelatedNames
				
				for(i = 1; i < Param3.getSize(); i++)
				{
					C_TEXT v, l;
					CUTF16String vv, ll;
					
					Param3.copyUTF16StringAtIndex(&vv, i);	
					Param4.copyUTF16StringAtIndex(&ll, i);	
					
					v.setUTF16String(&vv);
					l.setUTF16String(&ll);
					
					NSString *value = v.copyUTF16String();
					NSString *label = l.copyUTF16String();
					
					if([label length])
					{					
						identifier = [properties addValue:value withLabel:label];
						if((i == 1) && (identifier))
						{
							if(![properties setPrimaryIdentifier:identifier])
								NSLog(@"can't update primary identifier: %@ for %@", identifier, label);
						}
					}else{
						NSLog(@"attempt to set person property %@ with no label.", value);	
					}						
					[value release];
					[label release];					
				}
				
				if([person setValue:properties forProperty:kABRelatedNamesProperty])
					success = [[ABAddressBook sharedAddressBook]saveAndReturnError:&error];		
				
				break;
			case 6://Phone
				
				for(i = 1; i < Param3.getSize(); i++)
				{
					C_TEXT v, l;
					CUTF16String vv, ll;
					
					Param3.copyUTF16StringAtIndex(&vv, i);	
					Param4.copyUTF16StringAtIndex(&ll, i);	
					
					v.setUTF16String(&vv);
					l.setUTF16String(&ll);
					
					NSString *value = v.copyUTF16String();
					NSString *label = l.copyUTF16String();
					
					if([label length])
					{					
						identifier = [properties addValue:value withLabel:label];
						if((i == 1) && (identifier))
						{
							if(![properties setPrimaryIdentifier:identifier])
								NSLog(@"can't update primary identifier: %@ for %@", identifier, label);
						}
					}else{
						NSLog(@"attempt to set person property %@ with no label.", value);	
					}						
					[value release];
					[label release];					
				}
				
				if([person setValue:properties forProperty:kABPhoneProperty])
					success = [[ABAddressBook sharedAddressBook]saveAndReturnError:&error];				
				
				break;
/*
			case 7://AIMInstant
				
				for(i = 1; i < Param3.getSize(); i++)
				{
					C_TEXT v, l;
					CUTF16String vv, ll;
					
					Param3.copyUTF16StringAtIndex(&vv, i);	
					Param4.copyUTF16StringAtIndex(&ll, i);	
					
					v.setUTF16String(&vv);
					l.setUTF16String(&ll);
					
					NSString *value = v.copyUTF16String();
					NSString *label = l.copyUTF16String();
					
					if([label length])
					{					
						identifier = [properties addValue:value withLabel:label];
						if((i == 1) && (identifier))
						{
							if(![properties setPrimaryIdentifier:identifier])
								NSLog(@"can't update primary identifier: %@ for %@", identifier, label);
						}
					}else{
						NSLog(@"attempt to set person property %@ with no label.", value);	
					}						
					[value release];
					[label release];					
				}
				
				if([person setValue:properties forProperty:kABAIMInstantProperty])
					success = [[ABAddressBook sharedAddressBook]saveAndReturnError:&error];
				
				break;
			case 8://JabberInstant
				
				for(i = 1; i < Param3.getSize(); i++)
				{
					C_TEXT v, l;
					CUTF16String vv, ll;
					
					Param3.copyUTF16StringAtIndex(&vv, i);	
					Param4.copyUTF16StringAtIndex(&ll, i);	
					
					v.setUTF16String(&vv);
					l.setUTF16String(&ll);
					
					NSString *value = v.copyUTF16String();
					NSString *label = l.copyUTF16String();
					
					if([label length])
					{					
						identifier = [properties addValue:value withLabel:label];
						if((i == 1) && (identifier))
						{
							if(![properties setPrimaryIdentifier:identifier])
								NSLog(@"can't update primary identifier: %@ for %@", identifier, label);
						}
					}else{
						NSLog(@"attempt to set person property %@ with no label.", value);	
					}						
					[value release];
					[label release];					
				}
				
				if([person setValue:properties forProperty:kABJabberInstantProperty])
					success = [[ABAddressBook sharedAddressBook]saveAndReturnError:&error];
				
				break;
			case 9://MSNInstant
				
				for(i = 1; i < Param3.getSize(); i++)
				{
					C_TEXT v, l;
					CUTF16String vv, ll;
					
					Param3.copyUTF16StringAtIndex(&vv, i);	
					Param4.copyUTF16StringAtIndex(&ll, i);	
					
					v.setUTF16String(&vv);
					l.setUTF16String(&ll);
					
					NSString *value = v.copyUTF16String();
					NSString *label = l.copyUTF16String();
					
					if([label length])
					{				
						identifier = [properties addValue:value withLabel:label];
						if((i == 1) && (identifier))
						{
							if(![properties setPrimaryIdentifier:identifier])
								NSLog(@"can't update primary identifier: %@ for %@", identifier, label);
						}
					}else{
						NSLog(@"attempt to set person property %@ with no label.", value);	
					}						
					[value release];
					[label release];					
				}
				
				if([person setValue:properties forProperty:kABMSNInstantProperty])
					success = [[ABAddressBook sharedAddressBook]saveAndReturnError:&error];
				
				break;	
			case 10://YahooInstant
				
				for(i = 1; i < Param3.getSize(); i++)
				{
					C_TEXT v, l;
					CUTF16String vv, ll;
					
					Param3.copyUTF16StringAtIndex(&vv, i);	
					Param4.copyUTF16StringAtIndex(&ll, i);	
					
					v.setUTF16String(&vv);
					l.setUTF16String(&ll);
					
					NSString *value = v.copyUTF16String();
					NSString *label = l.copyUTF16String();	
					
					if([label length])
					{							
						identifier = [properties addValue:value withLabel:label];
						if((i == 1) && (identifier))
						{
							if(![properties setPrimaryIdentifier:identifier])
								NSLog(@"can't update primary identifier: %@ for %@", identifier, label);
						}
					}else{
						NSLog(@"attempt to set person property %@ with no label.", value);	
					}						
					[value release];
					[label release];					
				}
				
				if([person setValue:properties forProperty:kABYahooInstantProperty])
					success = [[ABAddressBook sharedAddressBook]saveAndReturnError:&error];
				
				break;
			case 11://ICQInstant
				
				for(i = 1; i < Param3.getSize(); i++)
				{
					C_TEXT v, l;
					CUTF16String vv, ll;
					
					Param3.copyUTF16StringAtIndex(&vv, i);	
					Param4.copyUTF16StringAtIndex(&ll, i);	
					
					v.setUTF16String(&vv);
					l.setUTF16String(&ll);
					
					NSString *value = v.copyUTF16String();
					NSString *label = l.copyUTF16String();				
					
					if([label length])
					{					
						identifier = [properties addValue:value withLabel:label];
						if((i == 1) && (identifier))
						{
							if(![properties setPrimaryIdentifier:identifier])
								NSLog(@"can't update primary identifier: %@ for %@", identifier, label);
						}
					}else{
						NSLog(@"attempt to set person property %@ with no label.", value);	
					}						
					[value release];
					[label release];					
				}
				
				if([person setValue:properties forProperty:kABICQInstantProperty])
					success = [[ABAddressBook sharedAddressBook]saveAndReturnError:&error];
				
				break;
*/
			default:
				break;																													
		}		
	}
	
	if(error)
	{
		success = [error code];
		NSLog(@"can't update person: %@", [error localizedDescription]);
	}		
	
	returnValue.setIntValue(success);
	returnValue.setReturn(pResult);
    
	[properties release];	
	[uniqueId release];
	[property release];
}

void AB_Get_person_properties(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	ARRAY_TEXT labels;
	ARRAY_TEXT values;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	
	int success = 0;
	
	NSString *uniqueId = Param1.copyUTF16String();
	NSString *property = Param2.copyUTF16String();
	
	ABPerson *person = _GetPersonForUniqueId(uniqueId);
	
	if(person)
	{
		NSArray *personProperties = [NSArray arrayWithObjects:
																 @"URLs", @"CalendarURI", @"Email", @"Address", @"OtherDates" ,
																 @"RelatedNames", @"Phone", @"AIMInstant", @"JabberInstant", @"MSNInstant", @"YahooInstant",
																 @"ICQInstant", nil];
		
		NSUInteger pid = [personProperties indexOfObject:property];
		
		ABMutableMultiValue *properties;
		
		unsigned int i;
		
		switch (pid)
		{
			case 0://URLs
				properties = [person valueForProperty:kABURLsProperty];
				if([properties count])
				{
					labels.appendUTF16String(@"");
					values.appendUTF16String(@"");
					
					for(i = 0; i< [properties count]; i++)
					{
						labels.appendUTF16String([properties labelAtIndex:i]);
						values.appendUTF16String([properties valueAtIndex:i]);
					}
				}
				success = 1;
				break;
			case 1://CalendarURI
				properties = [person valueForProperty:kABCalendarURIsProperty];
				if([properties count])
				{
					labels.appendUTF16String(@"");
					values.appendUTF16String(@"");
					
					for(i = 0; i< [properties count]; i++)
					{
						labels.appendUTF16String([properties labelAtIndex:i]);
						values.appendUTF16String([properties valueAtIndex:i]);
					}
				}
				success = 1;
				break;
			case 2://Email
				properties = [person valueForProperty:kABEmailProperty];
				if([properties count])
				{
					labels.appendUTF16String(@"");
					values.appendUTF16String(@"");
					
					for(i = 0; i< [properties count]; i++)
					{
						labels.appendUTF16String([properties labelAtIndex:i]);
						values.appendUTF16String([properties valueAtIndex:i]);
					}
				}
				success = 1;
				break;
			case 3://Address
				properties = [person valueForProperty:kABAddressProperty];
				if([properties count])
				{
					labels.appendUTF16String(@"");
					values.appendUTF16String(@"");
					
					for(i = 0; i< [properties count]; i++)
					{
						labels.appendUTF16String([properties labelAtIndex:i]);
						CFPropertyListRef dictionaryPropertyList = CFPropertyListCreateDeepCopy(kCFAllocatorDefault, (CFDictionaryRef)[properties valueAtIndex:i], kCFPropertyListImmutable);
						NSData *dictionaryData = (NSData *)CFPropertyListCreateXMLData(kCFAllocatorDefault, dictionaryPropertyList);
						NSString *addressData = [[NSString alloc]initWithData:dictionaryData encoding:NSUTF8StringEncoding];
						[dictionaryData release];
						CFRelease(dictionaryPropertyList);
						values.appendUTF16String(addressData);
						[addressData release];
					}
				}
				success = 1;
				break;
			case 4://OtherDates
				properties = [person valueForProperty:kABOtherDatesProperty];
				if([properties count])
				{
					labels.appendUTF16String(@"");
					values.appendUTF16String(@"");
					
					for(i = 0; i< [properties count]; i++)
					{
						labels.appendUTF16String([properties labelAtIndex:i]);
						values.appendUTF16String([[properties valueAtIndex:i]description]);
					}
				}
				success = 1;
				break;
			case 5://RelatedNames
				properties = [person valueForProperty:kABRelatedNamesProperty];
				if([properties count])
				{
					labels.appendUTF16String(@"");
					values.appendUTF16String(@"");
					
					for(i = 0; i< [properties count]; i++)
					{
						labels.appendUTF16String([properties labelAtIndex:i]);
						values.appendUTF16String([properties valueAtIndex:i]);
					}
				}
				success = 1;
				break;
			case 6://Phone
				properties = [person valueForProperty:kABPhoneProperty];
				if([properties count])
				{
					labels.appendUTF16String(@"");
					values.appendUTF16String(@"");
					
					for(i = 0; i< [properties count]; i++)
					{
						labels.appendUTF16String([properties labelAtIndex:i]);
						values.appendUTF16String([properties valueAtIndex:i]);
					}
				}
				success = 1;
				break;
			case 7://AIMInstant
				properties = [person valueForProperty:kABAIMInstantProperty];
				if([properties count])
				{
					labels.appendUTF16String(@"");
					values.appendUTF16String(@"");
					
					for(i = 0; i< [properties count]; i++)
					{
						labels.appendUTF16String([properties labelAtIndex:i]);
						values.appendUTF16String([properties valueAtIndex:i]);
					}
				}
				success = 1;
				break;
			case 8://JabberInstant
				properties = [person valueForProperty:kABJabberInstantProperty];
				if([properties count])
				{
					labels.appendUTF16String(@"");
					values.appendUTF16String(@"");
					
					for(i = 0; i< [properties count]; i++)
					{
						labels.appendUTF16String([properties labelAtIndex:i]);
						values.appendUTF16String([properties valueAtIndex:i]);
					}
				}
				success = 1;
				break;
			case 9://MSNInstant
				properties = [person valueForProperty:kABMSNInstantProperty];
				if([properties count])
				{
					labels.appendUTF16String(@"");
					values.appendUTF16String(@"");
					
					for(i = 0; i< [properties count]; i++)
					{
						labels.appendUTF16String([properties labelAtIndex:i]);
						values.appendUTF16String([properties valueAtIndex:i]);
					}
				}
				success = 1;
				break;
			case 10://YahooInstant
				properties = [person valueForProperty:kABYahooInstantProperty];
				if([properties count])
				{
					labels.appendUTF16String(@"");
					values.appendUTF16String(@"");
					
					for(i = 0; i< [properties count]; i++)
					{
						labels.appendUTF16String([properties labelAtIndex:i]);
						values.appendUTF16String([properties valueAtIndex:i]);
					}
				}
				success = 1;
				break;
			case 11://ICQInstant
				properties = [person valueForProperty:kABICQInstantProperty];
				if([properties count])
				{
					labels.appendUTF16String(@"");
					values.appendUTF16String(@"");
					
					for(i = 0; i< [properties count]; i++)
					{
						labels.appendUTF16String([properties labelAtIndex:i]);
						values.appendUTF16String([properties valueAtIndex:i]);
					}
				}
				success = 1;
				break;
			default:
				break;
		}
		
	}
	
	labels.toParamAtIndex(pParams, 3);
	values.toParamAtIndex(pParams, 4);
	
	[property release];
	[uniqueId release];
	
	returnValue.setIntValue(success);
	returnValue.setReturn(pResult);
}

void AB_Set_person_image(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	
	NSError *error = nil;
	int success = 0;
	NSString *uniqueId = Param1.copyUTF16String();
	ABPerson *person = _GetPersonForUniqueId(uniqueId);
	
	if(person)
	{
		PA_Picture p = *(PA_Picture *)(pParams[1]);
		CGImageRef cgImage = (CGImageRef)PA_CreateNativePictureForScreen(p);
		NSImage *nsImage = [[NSImage alloc]initWithCGImage:cgImage size:NSZeroSize];
		NSData *image = [nsImage TIFFRepresentation];
		[nsImage release];
		
		if(image)
		{
			if([person setImageData:image])
				success = [[ABAddressBook sharedAddressBook]saveAndReturnError:&error];
			
		}else{
			if([person setImageData:nil])//no image for this record
				success = [[ABAddressBook sharedAddressBook]saveAndReturnError:&error];
		}
	}
	
	if(error)
	{
		success = [error code];
		NSLog(@"can't update person: %@", [error localizedDescription]);
	}
	
	[uniqueId release];
	
	returnValue.setIntValue(success);
	returnValue.setReturn(pResult);
}

void AB_Get_person_image(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT returnValue;
	PA_Picture picture;
	
	Param1.fromParamAtIndex(pParams, 1);
	
	int success = 0;
	NSData *image;
	
	NSString *uniqueId = Param1.copyUTF16String();
	ABPerson *person = _GetPersonForUniqueId(uniqueId);
	
	if(person)
	{
		image = [person imageData];
		
		if(image)
		{
			picture = PA_CreatePicture((void *)[image bytes], [image length]);
		}else{
			picture = PA_CreatePicture(NULL, 0);
		}
		success = 1;
	}else{
		picture = PA_CreatePicture(NULL, 0);
	}
	
	PA_Picture* ptpict;
	
	ptpict = (PA_Picture *)(pParams[1]);
	
	if (*ptpict)
		PA_DisposePicture(*ptpict);
	
	*ptpict = picture;
	
	[uniqueId release];
	
	returnValue.setIntValue(success);
	returnValue.setReturn(pResult);
}

void AB_Person_get_vcard(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	
	int success = 0;
	
	NSString *uniqueId = Param1.copyUTF16String();
	ABPerson *person = _GetPersonForUniqueId(uniqueId);
	NSData *vcard;
	
	if(person)
	{
		vcard = [person vCardRepresentation];
		
		if(vcard)
		{
			Param2.setUTF8String((const uint8_t *)[vcard bytes], [vcard length]);
			Param2.toParamAtIndex(pParams, 2);
			success = 1;
		}
	}
	
	[uniqueId release];
	
	returnValue.setIntValue(success);
	returnValue.setReturn(pResult);
}

void AB_QUERY_PEOPLE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_TEXT Param3;
	C_TEXT Param4;
	C_TEXT Param5;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	Param4.fromParamAtIndex(pParams, 4);
	Param5.fromParamAtIndex(pParams, 5);
	
	NSString *property = Param1.copyUTF16String();
	NSString *label = Param2.copyUTF16String();
	NSString *key = Param3.copyUTF16String();
	NSString *value = Param4.copyUTF16String();
	NSString *comparison = Param5.copyUTF16String();
	
	ABSearchElement *search = [ABPerson searchElementForProperty:_PropertyForName(property) label:_LabelForName(label)
																													 key:_AddressKeyForName(key) value:_ValueForProperty(value, property) comparison:_SearchComparisonForName(comparison)];
	
	NSArray *people = [[ABAddressBook sharedAddressBook]recordsMatchingSearchElement:search];
	
	ARRAY_TEXT person_ids;
	
	unsigned int i;
	
	if([people count])
	{
		person_ids.appendUTF16String(@"");
		for(i = 0; i < [people count]; i++)
		{
			person_ids.appendUTF16String([[people objectAtIndex:i]uniqueId]);
		}
	}
	
	person_ids.toParamAtIndex(pParams, 6);
	
	[property release];
	[label release];
	[key release];
	[value release];
	[comparison release];
}

void AB_Create_person_with_vcard(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT returnValue;
    
	Param1.fromParamAtIndex(pParams, 1);
    
	NSError *error = nil;
	
	NSString *vcard = Param1.copyUTF16String();
	ABPerson *person = [[ABPerson alloc]initWithVCardRepresentation:[vcard dataUsingEncoding:NSUTF8StringEncoding]];
	
	if(person)
	{
		[[ABAddressBook sharedAddressBook ]addRecord:person];
		if(![[ABAddressBook sharedAddressBook]saveAndReturnError:&error])
		{
			NSLog(@"can't create person: %@", [error localizedDescription]);
		}else{
			returnValue.setUTF16String([person uniqueId]);
		}
		[person release];
	}
	
	[vcard release];
    
	returnValue.setReturn(pResult);
}

void AB_Set_person_flags(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT Param2;
	C_LONGINT returnValue;
    
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
    
	int success = 0;
	NSError *error = nil;
	
	NSString *uniqueId = Param1.copyUTF16String();
	ABPerson *person = _GetPersonForUniqueId(uniqueId);
	int flags = Param2.getIntValue();	
	
	if(person)
	{
		if([person setValue:[NSNumber numberWithInt:flags] forProperty:kABPersonFlags])
			success = [[ABAddressBook sharedAddressBook]saveAndReturnError:&error];
	}
	
	if(error)
	{
		success = [error code];
		NSLog(@"can't update person: %@", [error localizedDescription]);
	}
	
	[uniqueId release];
    
	returnValue.setIntValue(success);
	returnValue.setReturn(pResult);
}

void AB_Get_person_flags(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT Param2;
	C_LONGINT returnValue;
    
	Param1.fromParamAtIndex(pParams, 1);
    
	int success = 0;
	
	NSString *uniqueId = Param1.copyUTF16String();
	ABPerson *person = _GetPersonForUniqueId(uniqueId);
	
	if(person)
	{
		Param2.setIntValue([[person valueForProperty:kABPersonFlags]intValue]);
		success = 1;
	}
	
	[uniqueId release];
    
	Param2.toParamAtIndex(pParams, 2);
	
	returnValue.setIntValue(success);
	returnValue.setReturn(pResult);
}

void AB_Get_me(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT returnValue;
    
	ABPerson *person = [[ABAddressBook sharedAddressBook]me];
	
	if(person)
	{
		returnValue.setUTF16String([person uniqueId]);
	}else{
		NSLog(@"no record is set as me");
	}
    
	returnValue.setReturn(pResult);
}

void AB_Set_me(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT returnValue;
    
	Param1.fromParamAtIndex(pParams, 1);
    
	int success = 0;
	
	NSString *uniqueId = Param1.copyUTF16String();	
	ABPerson *person = _GetPersonForUniqueId(uniqueId);
	
	[[ABAddressBook sharedAddressBook]setMe:person];
	
	success = 1;	
    
	[uniqueId release];
    
	returnValue.setIntValue(success);
	returnValue.setReturn(pResult);
}

// ------------------------------------- Group ------------------------------------


void AB_Create_group(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT returnValue;
    
	NSError *error = nil;
	
	ABGroup *group = [[ABGroup alloc]init];
	
	[[ABAddressBook sharedAddressBook]addRecord:group];
	
	if(![[ABAddressBook sharedAddressBook]saveAndReturnError:&error])
	{
		NSLog(@"can't create group: %@", [error localizedDescription]);
	}else{
		returnValue.setUTF16String([group uniqueId]);
	}
	
	[group release];
    
	returnValue.setReturn(pResult);
}

void AB_Set_group_name(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_LONGINT returnValue;
    
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
    
	int success = 0;
	NSError *error = nil;	
	
	NSString *uniqueId = Param1.copyUTF16String();
	NSString *name = Param2.copyUTF16String();
	
	ABGroup *group = _GetGroupForUniqueId(uniqueId);
	
	if(group)
	{
		if([group setValue:name forProperty:@"GroupName"])
			success = [[ABAddressBook sharedAddressBook]saveAndReturnError:&error];		
	}
	
	if(error)
	{
		success = [error code];
		NSLog(@"can't update group: %@", [error localizedDescription]);
	}	
	
	[uniqueId release];
	[name release];	
    
	returnValue.setIntValue(success);
	returnValue.setReturn(pResult);
}

void AB_Get_group_name(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_LONGINT returnValue;
    
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
    
	int success = 0;
	NSString *uniqueId = Param1.copyUTF16String();
	
	ABGroup *group = _GetGroupForUniqueId(uniqueId);
	
	if(group) 
	{
		Param2.setUTF16String([group valueForProperty:@"GroupName"]);
		success = 1;		
	}
	
	[uniqueId release];
    
	Param2.toParamAtIndex(pParams, 2);
	
	returnValue.setIntValue(success);
	returnValue.setReturn(pResult);
}

void AB_Remove_group(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT returnValue;
    
	Param1.fromParamAtIndex(pParams, 1);
    
	int success = 0;
	NSError *error = nil;	
	NSString *uniqueId = Param1.copyUTF16String();
	
	ABGroup *group = _GetGroupForUniqueId(uniqueId);
	
	if(group)
	{
		if([[ABAddressBook sharedAddressBook]removeRecord:group])
			success = [[ABAddressBook sharedAddressBook]saveAndReturnError:&error];
	}
	
	if(error)
	{
		success = [error code];
		NSLog(@"can't remove group: %@", [error localizedDescription]);
	}
	
	[uniqueId release];	
	
	returnValue.setIntValue(success);
	returnValue.setReturn(pResult);
}

void AB_Remove_person_from_group(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_LONGINT returnValue;
    
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
    
	int success = 0;
	NSError *error = nil;	
	
	NSString *group_uniqueId = Param1.copyUTF16String();	
	NSString *person_uniqueId = Param2.copyUTF16String();	
	
	ABGroup *group = _GetGroupForUniqueId(group_uniqueId);
	ABPerson *person = _GetPersonForUniqueId(person_uniqueId);
	
	if((group) && (person))
	{
		if([group removeMember:person])
		{
			success = [[ABAddressBook sharedAddressBook]saveAndReturnError:&error];
		}		
	}
	
	if(error)
	{
		success = [error code];
		NSLog(@"can't remove person from group: %@", [error localizedDescription]);
	}
	
	[group_uniqueId release];
	[person_uniqueId release];
    
	returnValue.setIntValue(success);
	returnValue.setReturn(pResult);
}

void AB_Add_group_to_group(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_LONGINT returnValue;
    
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
    
	int success = 0;
	NSError *error = nil;	
	
	NSString *group_uniqueId = Param1.copyUTF16String();	
	NSString *subgroup_uniqueId = Param2.copyUTF16String();	
	
	ABGroup *group = _GetGroupForUniqueId(group_uniqueId);
	ABGroup *subgroup = _GetGroupForUniqueId(subgroup_uniqueId);	
	
	if((group) && (subgroup))
	{
		if([group addSubgroup:subgroup])
		{
			success = [[ABAddressBook sharedAddressBook]saveAndReturnError:&error];
		}		
	}
	
	if(error)
	{
		success = [error code];
		NSLog(@"can't add group to group: %@", [error localizedDescription]);
	}		
    
	[group_uniqueId release];
	[subgroup_uniqueId release];
    
	returnValue.setIntValue(success);
	returnValue.setReturn(pResult);
}

void AB_Add_person_to_group(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_LONGINT returnValue;
    
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
    
	int success = 0;
	NSError *error = nil;
	NSString *group_uniqueId = Param1.copyUTF16String();	
	NSString *person_uniqueId = Param2.copyUTF16String();	
	
	ABGroup *group = _GetGroupForUniqueId(group_uniqueId);
	ABPerson *person = _GetPersonForUniqueId(person_uniqueId);
	
	if((group) && (person))
	{
		if([group addMember:person])
		{
			success = [[ABAddressBook sharedAddressBook]saveAndReturnError:&error];
		}
	}
	
	if(error)
	{
		success = [error code];
		NSLog(@"can't add person from group: %@", [error localizedDescription]);
	}	
	
	[group_uniqueId release];
	[person_uniqueId release];
    
	returnValue.setIntValue(success);
	returnValue.setReturn(pResult);
}

void AB_Remove_group_from_group(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_LONGINT returnValue;
    
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
    
	int success = 0;
	NSError *error = nil;
	NSString *group_uniqueId = Param1.copyUTF16String();	
	NSString *subgroup_uniqueId = Param2.copyUTF16String();		
	
	ABGroup *group = _GetGroupForUniqueId(group_uniqueId);
	ABGroup *subgroup = _GetGroupForUniqueId(subgroup_uniqueId);	
	
	if((group) && (subgroup))
	{
		if([group removeSubgroup:subgroup])
		{
			success = [[ABAddressBook sharedAddressBook]saveAndReturnError:&error];
		}
	}
	
	if(error)
	{
		success = [error code];
		NSLog(@"can't remove group from group: %@", [error localizedDescription]);
	}			
	
	[group_uniqueId release];
	[subgroup_uniqueId release];
    
	returnValue.setIntValue(success);
	returnValue.setReturn(pResult);
}

void AB_Get_people_in_group(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	ARRAY_TEXT people;
	C_LONGINT returnValue;
    
	Param1.fromParamAtIndex(pParams, 1);
    
	int success = 0;
	NSString *uniqueId = Param1.copyUTF16String();
    
	unsigned int i;
	
	ABGroup *group = _GetGroupForUniqueId(uniqueId);
	
	if(group)
	{
		NSArray *members = [group members];
		
		if([members count])
		{
			people.appendUTF16String(@"");
			for( i = 0; i < [members count]; ++i )
			{
				if((i % 0x2000)==0)
				{
					PA_YieldAbsolute();
				}
				people.appendUTF16String([[members objectAtIndex:i]valueForProperty:@"UID"]);
			}
			success = 1;
		}
	}	
	
	[uniqueId release];
	
    people.toParamAtIndex(pParams, 2);
	returnValue.setIntValue(success);
	returnValue.setReturn(pResult);
}

void AB_Get_groups_in_group(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	ARRAY_TEXT groups;
	C_LONGINT returnValue;
    
	Param1.fromParamAtIndex(pParams, 1);
    
	int success = 0;
	NSString *uniqueId = Param1.copyUTF16String();
    
	unsigned int i;
	
	ABGroup *group = _GetGroupForUniqueId(uniqueId);
	
	if(group)
	{
		NSArray *subgroups = [group subgroups];
		
		if([subgroups count])
		{		
			groups.appendUTF16String(@"");
			for( i = 0; i < [subgroups count]; i++ )
			{
				groups.appendUTF16String([[subgroups objectAtIndex:i]valueForProperty:@"UID"]);
			}
			groups.toParamAtIndex(pParams, 2);
			success = 1;
		}
	}	
    
	[uniqueId release];
    
	returnValue.setIntValue(success);
	returnValue.setReturn(pResult);
}

// ----------------------------------- Type Cast ----------------------------------


void AB_Make_date(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_DATE Param1;
	C_TIME Param2;
	C_TEXT Param3;
	C_TEXT returnValue;
    
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	
	PA_Date date;	
	date.fYear = Param1.getYear();	
	date.fMonth = Param1.getMonth();
	date.fDay = Param1.getDay();
    
	int seconds = Param2.getSeconds();
	NSString *name = Param3.copyUTF16String();
	
	NSString *description = _DateTimeZoneToString(&date, seconds, name);
	returnValue.setUTF16String(description);
    
	[description release];
	[name release];	
    
	returnValue.setReturn(pResult);
}

void AB_GET_DATE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_DATE Param2;
	C_TIME Param3;
	C_LONGINT Param4;
    
	Param1.fromParamAtIndex(pParams, 1);
    
	NSString *dateString = Param1.copyUTF16String();	
	
	PA_Date date;
	date.fDay = 0;
	date.fMonth = 0;
	date.fYear = 0;	
	int time = 0;
	int offset = 0;
	
	_StringToDateTimeOffset(dateString, &date, &time, &offset);
	
	Param2.setYearMonthDay(date.fYear, date.fMonth, date.fDay);
	Param3.setSeconds(time);
	Param4.setIntValue(offset);
    
	[dateString release];
    
	Param2.toParamAtIndex(pParams, 2);
	Param3.toParamAtIndex(pParams, 3);
	Param4.toParamAtIndex(pParams, 4);
}

void AB_Make_address(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_TEXT Param3;
	C_TEXT Param4;
	C_TEXT Param5;
	C_TEXT Param6;
	C_TEXT returnValue;
    
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	Param4.fromParamAtIndex(pParams, 4);
	Param5.fromParamAtIndex(pParams, 5);
	Param6.fromParamAtIndex(pParams, 6);
    
	NSString *street = Param1.copyUTF16String();	
	NSString *city = Param2.copyUTF16String();	
	NSString *state = Param3.copyUTF16String();	
	NSString *zip = Param4.copyUTF16String();
	NSString *country = Param5.copyUTF16String();
	NSString *code = Param6.copyUTF16String();	
	
	NSMutableDictionary *address = [[NSMutableDictionary alloc]init];
	[address setObject:street forKey:kABAddressStreetKey];
	[address setObject:city forKey:kABAddressCityKey];
	[address setObject:state forKey:kABAddressStateKey];
	[address setObject:zip forKey:kABAddressZIPKey];
	[address setObject:country forKey:kABAddressCountryKey];
	[address setObject:[code lowercaseString] forKey:kABAddressCountryCodeKey];
	
	CFPropertyListRef dictionaryPropertyList = CFPropertyListCreateDeepCopy(kCFAllocatorDefault, (CFDictionaryRef)address, kCFPropertyListImmutable);	
	NSData *dictionaryData = (NSData *)CFPropertyListCreateXMLData(kCFAllocatorDefault, dictionaryPropertyList);	
	NSString *addressData = [[NSString alloc]initWithData:dictionaryData encoding:NSUTF8StringEncoding];
	[dictionaryData release];
	CFRelease(dictionaryPropertyList);	
	[address release];											
	
	returnValue.setUTF16String(addressData);
	
	[addressData release];
	
	[street release];
	[city release];
	[state release];
	[zip release];
	[country release];
	[code release];
    
	returnValue.setReturn(pResult);
}

void AB_GET_ADDRESS(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_TEXT Param3;
	C_TEXT Param4;
	C_TEXT Param5;
	C_TEXT Param6;
	C_TEXT Param7;
    
	Param1.fromParamAtIndex(pParams, 1);
    
	NSString *addressData = Param1.copyUTF16String();
	
	CFPropertyListRef dictionaryPropertyList = CFPropertyListCreateFromXMLData(kCFAllocatorDefault, (CFDataRef)[addressData dataUsingEncoding:NSUTF8StringEncoding], kCFPropertyListImmutable, NULL);	
	
	if(dictionaryPropertyList)
	{		
		if(CFGetTypeID(dictionaryPropertyList) == CFDictionaryGetTypeID())
		{
			NSDictionary *dictionary = (NSDictionary *)dictionaryPropertyList;
			Param2.setUTF16String([dictionary objectForKey:kABAddressStreetKey]);
			Param3.setUTF16String([dictionary objectForKey:kABAddressCityKey]);
			Param4.setUTF16String([dictionary objectForKey:kABAddressStateKey]);
			Param5.setUTF16String([dictionary objectForKey:kABAddressZIPKey]);
			Param6.setUTF16String([dictionary objectForKey:kABAddressCountryKey]);
			Param7.setUTF16String([dictionary objectForKey:kABAddressCountryCodeKey]);																															
		}
		CFRelease(dictionaryPropertyList);
	}
	
	[addressData release];
    
	Param2.toParamAtIndex(pParams, 2);
	Param3.toParamAtIndex(pParams, 3);
	Param4.toParamAtIndex(pParams, 4);
	Param5.toParamAtIndex(pParams, 5);
	Param6.toParamAtIndex(pParams, 6);
	Param7.toParamAtIndex(pParams, 7);
}

// --------------------------------- Address Book ---------------------------------


void AB_GET_LIST(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT arg1;
	ARRAY_TEXT ids;	
	C_LONGINT arg3;
	C_TEXT Param4;
    
	arg1.fromParamAtIndex(pParams, 1);
	arg3.fromParamAtIndex(pParams, 3);
	Param4.fromParamAtIndex(pParams, 4);
    
	unsigned int Param1 = arg1.getIntValue();
	unsigned int Param3 = arg3.getIntValue();
	NSString *anchorDate = Param4.copyUTF16String();
	NSDate *nsd;
	ABSearchElement *search;
	nsd = [NSDate dateWithString:anchorDate];
	
	NSArray *people = nil;
	NSArray *groups = nil;	
	
	unsigned int i; 
	
	switch (Param1) 
	{
		case AB_PEOPLE:
			
			switch (Param3) 
		{
			case AB_RECORDS_ALL:
				people = [[ABAddressBook sharedAddressBook]people];
				if([people count])	
				{
					ids.appendUTF16String(@"");
					for(i = 0 ; i < [people count] ; ++i){
						if((i % 0x2000)==0)
						{
							PA_YieldAbsolute();
						}
						ids.appendUTF16String([[people objectAtIndex:i]valueForProperty:@"UID"]);
                    }
				}
				break;
			case AB_RECORDS_CREATED_SINCE:
				if(nsd)
				{
					search = [ABPerson 
							  searchElementForProperty:kABCreationDateProperty
							  label:nil
							  key:nil 
							  value:nsd 
							  comparison:kABGreaterThan];
					people = [[ABAddressBook sharedAddressBook]recordsMatchingSearchElement:search];
					if([people count])	
					{
						ids.appendUTF16String(@"");
						for(i = 0 ; i < [people count] ; ++i){
							if((i % 0x2000)==0)
							{
								PA_YieldAbsolute();
							}
							ids.appendUTF16String([[people objectAtIndex:i]valueForProperty:@"UID"]);
                        }
					}
				}
				break;
			case AB_RECORDS_MODIFIED_SINCE:
				if(nsd)
				{
					search = [ABPerson 
							  searchElementForProperty:kABModificationDateProperty
							  label:nil
							  key:nil 
							  value:nsd 
							  comparison:kABGreaterThan];
					people = [[ABAddressBook sharedAddressBook]recordsMatchingSearchElement:search];
					if([people count])	
					{
						ids.appendUTF16String(@"");
						for(i = 0 ; i < [people count] ; ++i){
							if((i % 0x2000)==0)
							{
								PA_YieldAbsolute();
							}
							ids.appendUTF16String([[people objectAtIndex:i]valueForProperty:@"UID"]);
                        }
					}
				}					
				break;				
			default:
				break;
		}
			break;
			
		case AB_GROUPS:
			
			switch (Param3) 
		{
			case AB_RECORDS_ALL:
				groups = [[ABAddressBook sharedAddressBook]groups];
				if([groups count])
				{	
					ids.appendUTF16String(@"");
					for(i = 0 ; i < [groups count] ; ++i){
						if((i % 0x2000)==0)
						{
							PA_YieldAbsolute();
						}
						ids.appendUTF16String([[groups objectAtIndex:i]valueForProperty:@"UID"]);
                    }
				}
				break;
			case AB_RECORDS_CREATED_SINCE:
				if(nsd)
				{
					search = [ABGroup
							  searchElementForProperty:kABCreationDateProperty
							  label:nil
							  key:nil 
							  value:nsd 
							  comparison:kABGreaterThan];
					if([groups count])	
					{
						ids.appendUTF16String(@"");
						for(i = 0 ; i < [groups count] ; ++i)
                        {
													if((i % 0x2000)==0)
													{
														PA_YieldAbsolute();
													}
							ids.appendUTF16String([[groups objectAtIndex:i]valueForProperty:@"UID"]);
                        }
					}
				}					
				break;
			case AB_RECORDS_MODIFIED_SINCE:
				if(nsd)
				{
					search = [ABGroup
							  searchElementForProperty:kABModificationDateProperty
							  label:nil
							  key:nil 
							  value:nsd 
							  comparison:kABGreaterThan];
					groups = [[ABAddressBook sharedAddressBook]recordsMatchingSearchElement:search];
					if([groups count])	
					{
						ids.appendUTF16String(@"");
						for(i = 0 ; i < [groups count] ; ++i)
                        {
													if((i % 0x2000)==0)
													{
														PA_YieldAbsolute();
													}
							ids.appendUTF16String([[groups objectAtIndex:i]valueForProperty:@"UID"]);
                        }
					}
				}					
				break;				
			default:
				break;
		}
			break;
			
		default:
			break;
	}
	
	ids.toParamAtIndex(pParams, 2);
	
	[anchorDate release];	
}

// ----------------------------------- Utilities ----------------------------------


void AB_Get_localized_string(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT returnValue;
    
	Param1.fromParamAtIndex(pParams, 1);
    
	//this is a C function, not Obj-C
	NSString *propertyOrLabel = Param1.copyUTF16String();
	NSString *localizedString = (NSString *)ABCopyLocalizedPropertyOrLabel((CFStringRef)propertyOrLabel);
	
	returnValue.setUTF16String(localizedString);
	
	[propertyOrLabel release];
	[localizedString release];
    
	returnValue.setReturn(pResult);
}

void AB_Get_default_country_code(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT returnValue;
    
	returnValue.setUTF16String([[ABAddressBook sharedAddressBook]defaultCountryCode]);	
	returnValue.setReturn(pResult);
}

void AB_Get_default_name_ordering(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT returnValue;
	
	returnValue.setIntValue([[ABAddressBook sharedAddressBook]defaultNameOrdering]);
	returnValue.setReturn(pResult);
}

// --------------------------------- Notification ---------------------------------


void AB_Set_notification_method(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_LONGINT returnValue;
    
    if(!IsProcessOnExit())
    {
        if(1)
        {
            AB::LISTENER_METHOD.fromParamAtIndex(pParams, 1);
        }
        PA_RunInMainProcess((PA_RunInMainProcessProcPtr)listener_start, NULL);
        listenerLoopStart();
        returnValue.setIntValue(1);
    }
    
	returnValue.setReturn(pResult);
}

void AB_Get_notification_method(sLONG_PTR *pResult, PackagePtr pParams)
{
    if(1)
    {
        AB::LISTENER_METHOD.toParamAtIndex(pParams, 1);
    }

    C_LONGINT returnValue;
    returnValue.setIntValue(1);
    returnValue.setReturn(pResult);
}

// ----------------------------------- Group II -----------------------------------


void AB_Get_parent_groups(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	ARRAY_TEXT groups;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	
	int success = 0;
	NSString *uniqueId = Param1.copyUTF16String();
	
	unsigned int i;
	
	ABGroup *group = _GetGroupForUniqueId(uniqueId);
	
	if(group)
	{
		NSArray *parentGroups = [group parentGroups];
		
		if([parentGroups count])
		{		
			groups.appendUTF16String(@"");
			for( i = 0; i < [parentGroups count]; ++i )
			{
				if((i % 0x2000)==0)
				{
					PA_YieldAbsolute();
				}
				groups.appendUTF16String([[parentGroups objectAtIndex:i]valueForProperty:@"UID"]);
			}
			success = 1;
		}
	}	
	
	[uniqueId release];
	
    groups.toParamAtIndex(pParams, 2);
	returnValue.setIntValue(success);
	returnValue.setReturn(pResult);
}

// ------------------------------------ Special -----------------------------------


void AB_LIST_GROUP_PEOPLE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	ARRAY_TEXT Param2;
	ARRAY_TEXT Param3;
	ARRAY_TEXT Param4;
	ARRAY_TEXT Param5;
	ARRAY_BOOLEAN Param6;
	ARRAY_BOOLEAN Param7;
	ARRAY_TEXT Param8;
	ARRAY_REAL Param9;
	
	Param1.fromParamAtIndex(pParams, 1);
    
	NSString *uniqueId = Param1.copyUTF16String();
	
	unsigned int i;
	NSArray *members = nil;
	
	if([uniqueId length]){
		ABGroup *group = _GetGroupForUniqueId(uniqueId);
		if(group) members = [group members];	
	}else{
		members = [[ABAddressBook sharedAddressBook]people];
	}
    
	NSInteger defaultNameOrdering = [[ABAddressBook sharedAddressBook]defaultNameOrdering];
	NSString *firstName;
	NSString *lastName;
	NSString *organization;
	NSDate *modificationDate;
	
	if(members)
	{
		if([members count])
		{
			Param2.appendUTF16String(@"");
			Param3.appendUTF16String(@"");
			Param4.appendUTF16String(@"");
			Param5.appendUTF16String(@"");
			Param6.appendBooleanValue(false);
			Param7.appendBooleanValue(false);			
			Param8.appendUTF16String(@"");
			Param9.appendDoubleValue(0);
			
			for( i = 0; i < [members count]; i++ )
			{
				ABPerson *person = [members objectAtIndex:i];
				
				Param2.appendUTF16String([person valueForProperty:kABUIDProperty]);
				
				firstName = [person valueForProperty:kABFirstNameProperty];
				if(firstName){
					Param3.appendUTF16String(firstName);
				}else{
					Param3.appendUTF16String(@"");				
				}
				
				lastName = [person valueForProperty:kABLastNameProperty];
				if(lastName){
					Param4.appendUTF16String(lastName);
				}else{
					Param4.appendUTF16String(@"");				
				}				
                
				organization = [person valueForProperty:kABOrganizationProperty];
				if(organization){
					Param5.appendUTF16String(organization);
				}else{
					Param5.appendUTF16String(@"");				
				}
				
				NSInteger nameOrdering = ([[person valueForProperty:kABPersonFlags]intValue] & kABNameOrderingMask);
				Param6.appendBooleanValue((nameOrdering == kABFirstNameFirst) || ((nameOrdering == kABDefaultNameOrdering) && (defaultNameOrdering == kABFirstNameFirst)));	
				
				Param7.appendBooleanValue(([[person valueForProperty:kABPersonFlags]intValue] & kABShowAsMask) == kABShowAsCompany);
                
				modificationDate = [person valueForProperty:kABModificationDateProperty];
				Param8.appendUTF16String([modificationDate description]);
				Param9.appendDoubleValue((double)[modificationDate timeIntervalSinceReferenceDate]);							
			}
            
		}
	}
	
	[uniqueId release];
	
	Param2.toParamAtIndex(pParams, 2);
	Param3.toParamAtIndex(pParams, 3);
	Param4.toParamAtIndex(pParams, 4);
	Param5.toParamAtIndex(pParams, 5);
	Param6.toParamAtIndex(pParams, 6);
	Param7.toParamAtIndex(pParams, 7);
	Param8.toParamAtIndex(pParams, 8);
	Param9.toParamAtIndex(pParams, 9);
}

void AB_FIND_PEOPLE(sLONG_PTR *pResult, PackagePtr pParams)
{
	ARRAY_TEXT Param1;
	ARRAY_TEXT Param2;
	ARRAY_TEXT Param3;
	ARRAY_TEXT Param4;
	ARRAY_TEXT Param5;
	C_LONGINT Param6;
	ARRAY_TEXT Param7;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	Param4.fromParamAtIndex(pParams, 4);
	Param5.fromParamAtIndex(pParams, 5);
	Param6.fromParamAtIndex(pParams, 6);
	
	// --- write the code of AB_FIND_PEOPLE here...
	
	unsigned int size1 = Param1.getSize(); 
	unsigned int size2 = Param2.getSize();	
	unsigned int size3 = Param3.getSize(); 
	unsigned int size4 = Param4.getSize();	
	unsigned int size5 = Param5.getSize(); 
	
	unsigned int i;
	
	if((size1 == size2) && (size2 == size3) && (size3 == size4) && (size4 == size5)){
        
		NSMutableArray *children = [[NSMutableArray alloc]init];
		
		for(i = 1; i < size1; i++){
			
			C_TEXT p, l, k, v, c;
			CUTF16String pp, ll, kk, vv, cc;
			
			Param1.copyUTF16StringAtIndex(&pp, i);	
			Param2.copyUTF16StringAtIndex(&ll, i);				
			Param3.copyUTF16StringAtIndex(&kk, i);	
			Param4.copyUTF16StringAtIndex(&vv, i);	
			Param5.copyUTF16StringAtIndex(&cc, i);
			
			NSString *property, *label, *key, *value, *comparison;
			
			p.setUTF16String(&pp);	
			l.setUTF16String(&ll);	
			k.setUTF16String(&kk);	
			v.setUTF16String(&vv);	
			c.setUTF16String(&cc);	
			
			property = p.copyUTF16String();
			label = l.copyUTF16String();
			key = k.copyUTF16String();
			value = v.copyUTF16String();
			comparison = c.copyUTF16String();			
            
			[children addObject:[ABPerson searchElementForProperty:_PropertyForName(property) 
															 label:_LabelForName(label)
															   key:_AddressKeyForName(key) 
															 value:_ValueForProperty(value, property) 
														comparison:_SearchComparisonForName(comparison)]];
			
			[property release];
			[label release];
			[key release];
			[value release];
			[comparison release];
            
		}
		
		ABSearchConjunction conjunction;
		
		if(!Param6.getIntValue()){
			conjunction = kABSearchOr;
		}else{
			conjunction = kABSearchAnd;		
		} 
		
		ABSearchElement *search = [ABSearchElement searchElementForConjunction:conjunction children:children];
		NSArray *people = [[ABAddressBook sharedAddressBook]recordsMatchingSearchElement:search];	
		
		[children release];
		
		if([people count])
		{
			Param7.appendUTF16String(@"");
			for(i = 0; i < [people count]; i++)
			{
				Param7.appendUTF16String([[people objectAtIndex:i]uniqueId]);
			}
		}
		
	}
    
	Param7.toParamAtIndex(pParams, 7);
}

void AB_GET_GROUP_GROUPS(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	ARRAY_TEXT Param2;
	
	unsigned int i;
	NSArray *groups = nil;
	
	Param1.fromParamAtIndex(pParams, 1);
	
	NSString *uniqueId = Param1.copyUTF16String();
	
	ABGroup *group = _GetGroupForUniqueId(uniqueId);
	
	if(group)
	{
		groups = [group parentGroups];
		
		if(groups)
		{
			if([groups count])
			{
				Param2.appendUTF16String(@"");				
				for( i = 0; i < [groups count]; ++i )
				{
					if((i % 0x2000)==0)
					{
						PA_YieldAbsolute();
					}
					Param2.appendUTF16String([[groups objectAtIndex:i] valueForProperty:kABUIDProperty]);
				}
			}
		}
	}
	
	[uniqueId release];	
	
	Param2.toParamAtIndex(pParams, 2);
}

void AB_GET_PERSON_GROUPS(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	ARRAY_TEXT Param2;
	
	unsigned int i;
	NSArray *groups = nil;
	
	Param1.fromParamAtIndex(pParams, 1);
	
	NSString *uniqueId = Param1.copyUTF16String();
	
	ABPerson *person = _GetPersonForUniqueId(uniqueId);
	
	if(person)
	{
		groups = [person parentGroups];
		
		if(groups)
		{
			if([groups count])
			{
				Param2.appendUTF16String(@"");				
				for( i = 0; i < [groups count]; ++i )
				{
					if((i % 0x2000)==0)
					{
						PA_YieldAbsolute();
					}
					Param2.appendUTF16String([[groups objectAtIndex:i] valueForProperty:kABUIDProperty]);
				}
			}
		}
	}
    
	[uniqueId release];	
	
	Param2.toParamAtIndex(pParams, 2);
}

void AB_REMOVE_FROM_PRIVACY_LIST(sLONG_PTR *pResult, PackagePtr pParams)
{
    @autoreleasepool
    {
        if(NSClassFromString(@"NSUserNotificationCenter"))
        {
            [NSTask launchedTaskWithLaunchPath:@"/usr/bin/tccutil" arguments:@[@"reset", @"AddressBook"]];
        }
    }
}

void AB_Is_access_denied(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT returnValue;

	returnValue.setIntValue(![ABAddressBook sharedAddressBook]);
	returnValue.setReturn(pResult);
}

